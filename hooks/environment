#!/bin/bash
set -eu -o pipefail

basedir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && cd .. && pwd )"

# shellcheck disable=SC1090
. "$basedir/lib/shared.bash"

export TMPDIR=${TMPDIR:-/tmp}
export AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION:-us-east-1}

# A non-configurable prefix used on all secrets
readonly secret_prefix="buildkite/${BUILDKITE_ORGANIZATION_SLUG}"

debug() {
  if [[ "${BUILDKITE_SECRETS_MANAGER_DEBUG:-false}" =~ (true|on|1) ]] ; then
    echo "$@"
  fi
}

echo "~~~ Loading secrets from AWS Secrets Manager" >&2;
debug "Searching in prefix ${secret_prefix} in region ${AWS_DEFAULT_REGION}"

# Read all the secret keys into an array
secrets=()
while read -r name _ ; do
  secrets+=("$name")
done < <(sm_secret_names)

# Finish quickly if no secrets are found
if [ ${#secrets[@]} -eq 0 ] ; then
  echo "No secrets found"
  exit 0
fi

# First up we look for ssh keys if the repository is ssh
if [[ "${BUILDKITE_REPO:-}" =~ ^git ]] ; then
  ssh_key_paths=(
    "${secret_prefix}/ssh-private-key"
    "${secret_prefix}/pipeline/${BUILDKITE_PIPELINE_SLUG}/ssh-private-key"
  )

  # Look in our key paths in order, but we'll load them all
  for key in ${ssh_key_paths[*]} ; do
    debug "Checking ${key}" >&2

    # Check if that secret key exists
    if in_array "$key" "${secrets[@]}" ; then
      echo "Found ssh-key at ${key}" >&2;

      ssh_key=$(sm_secret_get "$key")
      if [[ ${ssh_key} = "None" ]]; then
        echo "+++ :warning: Failed to get secret $key" >&2;
        exit 1
      fi

      # Add the ssh key to an ephemeral ssh agent so the key never touches disk
      debug "Got ${#ssh_key} bytes of ssh key"
      add_ssh_private_key_to_agent "$ssh_key"
      key_found=1
    fi
  done

  if [[ -z "${key_found:-}" ]] ; then
    echo "+++ :warning: Failed to find any ssh key secrets" >&2;
    exit 1
  fi
fi

# Otherwise check for git credentials for https, use the first one we find
if [[ "${BUILDKITE_REPO:-}" =~ ^http ]] ; then
  git_credentials_paths=(
    "${secret_prefix}/git-credentials"
    "${secret_prefix}/pipeline/${BUILDKITE_PIPELINE_SLUG}/git-credentials"
  )

  git_credentials=()

  for key in ${git_credentials_paths[*]} ; do
    debug "Checking ${key}" >&2

    if in_array "$key" "${secrets[@]}" ; then
      echo "Adding git-credentials in $key as a credential helper" >&2;
      git_credentials+=("'credential.helper=$basedir/git-credential-sm-secrets ${key}'")
    fi
  done

  if [[ "${#git_credentials[@]}" -gt 0 ]] ; then
    export GIT_CONFIG_PARAMETERS
    debug "Setting GIT_CONFIG_PARAMETERS"
    GIT_CONFIG_PARAMETERS=$( IFS=' '; echo -n "${git_credentials[*]}" )
  fi
fi

# Finally look for environment variables
env_path_prefixes=(
  "${secret_prefix}/env/"
  "${secret_prefix}/pipeline/${BUILDKITE_PIPELINE_SLUG}/env/"
)

for secret_name in ${secrets[*]} ; do
  for env_path_prefix in ${env_path_prefixes[*]} ; do
    if [[ $secret_name =~ ^$env_path_prefix ]] ; then
      echo "Found env $secret_name" >&2;
      sm_secret_get "$secret_name" "SecretString"
    else
      debug "Env $secret_name didn't match $env_path_prefix"
    fi
  done
done
